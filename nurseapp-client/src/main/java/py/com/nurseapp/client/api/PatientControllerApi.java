/*
 * Nurse App api documentation
 * Nurse app api with all services provided.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: marcos.echague@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package py.com.nurseapp.client.api;

import py.com.nursepp.client.ApiCallback;
import py.com.nursepp.client.ApiClient;
import py.com.nursepp.client.ApiException;
import py.com.nursepp.client.ApiResponse;
import py.com.nursepp.client.Configuration;
import py.com.nursepp.client.Pair;
import py.com.nursepp.client.ProgressRequestBody;
import py.com.nursepp.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import py.com.nurseapp.client.model.ErrorResponse;
import py.com.nurseapp.client.model.Patient;
import py.com.nurseapp.client.model.PatientDto;
import py.com.nurseapp.client.model.PatientVitalSignDto;
import py.com.nurseapp.client.model.ResponsePatientListDto;
import py.com.nurseapp.client.model.ResponsePatientVitalSignDto;
import py.com.nurseapp.client.model.ResponsePatientVitalSignListDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PatientControllerApi {
    private ApiClient apiClient;

    public PatientControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PatientControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createHistoryPatientVitalSignUsingPOST
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientVitalSignDto patientVitalSignDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHistoryPatientVitalSignUsingPOSTCall(String xNurseappApikey, PatientVitalSignDto patientVitalSignDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = patientVitalSignDto;

        // create path and map variables
        String localVarPath = "/patientes/vital-signs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xNurseappApikey != null)
        localVarHeaderParams.put("x-nurseapp-apikey", apiClient.parameterToString(xNurseappApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHistoryPatientVitalSignUsingPOSTValidateBeforeCall(String xNurseappApikey, PatientVitalSignDto patientVitalSignDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xNurseappApikey' is set
        if (xNurseappApikey == null) {
            throw new ApiException("Missing the required parameter 'xNurseappApikey' when calling createHistoryPatientVitalSignUsingPOST(Async)");
        }
        
        // verify the required parameter 'patientVitalSignDto' is set
        if (patientVitalSignDto == null) {
            throw new ApiException("Missing the required parameter 'patientVitalSignDto' when calling createHistoryPatientVitalSignUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createHistoryPatientVitalSignUsingPOSTCall(xNurseappApikey, patientVitalSignDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Register history patient vital sign 
     * Register a new history patient vital sign 
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientVitalSignDto patientVitalSignDto (required)
     * @return ResponsePatientVitalSignDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponsePatientVitalSignDto createHistoryPatientVitalSignUsingPOST(String xNurseappApikey, PatientVitalSignDto patientVitalSignDto) throws ApiException {
        ApiResponse<ResponsePatientVitalSignDto> resp = createHistoryPatientVitalSignUsingPOSTWithHttpInfo(xNurseappApikey, patientVitalSignDto);
        return resp.getData();
    }

    /**
     * Register history patient vital sign 
     * Register a new history patient vital sign 
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientVitalSignDto patientVitalSignDto (required)
     * @return ApiResponse&lt;ResponsePatientVitalSignDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponsePatientVitalSignDto> createHistoryPatientVitalSignUsingPOSTWithHttpInfo(String xNurseappApikey, PatientVitalSignDto patientVitalSignDto) throws ApiException {
        com.squareup.okhttp.Call call = createHistoryPatientVitalSignUsingPOSTValidateBeforeCall(xNurseappApikey, patientVitalSignDto, null, null);
        Type localVarReturnType = new TypeToken<ResponsePatientVitalSignDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register history patient vital sign  (asynchronously)
     * Register a new history patient vital sign 
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientVitalSignDto patientVitalSignDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHistoryPatientVitalSignUsingPOSTAsync(String xNurseappApikey, PatientVitalSignDto patientVitalSignDto, final ApiCallback<ResponsePatientVitalSignDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHistoryPatientVitalSignUsingPOSTValidateBeforeCall(xNurseappApikey, patientVitalSignDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponsePatientVitalSignDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPatientUsingPOST
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientDto patientDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPatientUsingPOSTCall(String xNurseappApikey, PatientDto patientDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = patientDto;

        // create path and map variables
        String localVarPath = "/patients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xNurseappApikey != null)
        localVarHeaderParams.put("x-nurseapp-apikey", apiClient.parameterToString(xNurseappApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPatientUsingPOSTValidateBeforeCall(String xNurseappApikey, PatientDto patientDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xNurseappApikey' is set
        if (xNurseappApikey == null) {
            throw new ApiException("Missing the required parameter 'xNurseappApikey' when calling createPatientUsingPOST(Async)");
        }
        
        // verify the required parameter 'patientDto' is set
        if (patientDto == null) {
            throw new ApiException("Missing the required parameter 'patientDto' when calling createPatientUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createPatientUsingPOSTCall(xNurseappApikey, patientDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Register patient
     * Create new patient
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientDto patientDto (required)
     * @return Patient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Patient createPatientUsingPOST(String xNurseappApikey, PatientDto patientDto) throws ApiException {
        ApiResponse<Patient> resp = createPatientUsingPOSTWithHttpInfo(xNurseappApikey, patientDto);
        return resp.getData();
    }

    /**
     * Register patient
     * Create new patient
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientDto patientDto (required)
     * @return ApiResponse&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Patient> createPatientUsingPOSTWithHttpInfo(String xNurseappApikey, PatientDto patientDto) throws ApiException {
        com.squareup.okhttp.Call call = createPatientUsingPOSTValidateBeforeCall(xNurseappApikey, patientDto, null, null);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register patient (asynchronously)
     * Create new patient
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientDto patientDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPatientUsingPOSTAsync(String xNurseappApikey, PatientDto patientDto, final ApiCallback<Patient> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPatientUsingPOSTValidateBeforeCall(xNurseappApikey, patientDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePatientUsingDELETE
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePatientUsingDELETECall(String xNurseappApikey, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patients/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xNurseappApikey != null)
        localVarHeaderParams.put("x-nurseapp-apikey", apiClient.parameterToString(xNurseappApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePatientUsingDELETEValidateBeforeCall(String xNurseappApikey, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xNurseappApikey' is set
        if (xNurseappApikey == null) {
            throw new ApiException("Missing the required parameter 'xNurseappApikey' when calling deletePatientUsingDELETE(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePatientUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePatientUsingDELETECall(xNurseappApikey, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete patient
     * Delete patient data
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePatientUsingDELETE(String xNurseappApikey, Integer id) throws ApiException {
        deletePatientUsingDELETEWithHttpInfo(xNurseappApikey, id);
    }

    /**
     * Delete patient
     * Delete patient data
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePatientUsingDELETEWithHttpInfo(String xNurseappApikey, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deletePatientUsingDELETEValidateBeforeCall(xNurseappApikey, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete patient (asynchronously)
     * Delete patient data
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePatientUsingDELETEAsync(String xNurseappApikey, Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePatientUsingDELETEValidateBeforeCall(xNurseappApikey, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPatientUsingGET
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPatientUsingGETCall(String xNurseappApikey, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patients/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xNurseappApikey != null)
        localVarHeaderParams.put("x-nurseapp-apikey", apiClient.parameterToString(xNurseappApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPatientUsingGETValidateBeforeCall(String xNurseappApikey, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xNurseappApikey' is set
        if (xNurseappApikey == null) {
            throw new ApiException("Missing the required parameter 'xNurseappApikey' when calling getPatientUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPatientUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getPatientUsingGETCall(xNurseappApikey, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get patient
     * Get patient&#39;s data. given an id-patient
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @return Patient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Patient getPatientUsingGET(String xNurseappApikey, Integer id) throws ApiException {
        ApiResponse<Patient> resp = getPatientUsingGETWithHttpInfo(xNurseappApikey, id);
        return resp.getData();
    }

    /**
     * Get patient
     * Get patient&#39;s data. given an id-patient
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @return ApiResponse&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Patient> getPatientUsingGETWithHttpInfo(String xNurseappApikey, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getPatientUsingGETValidateBeforeCall(xNurseappApikey, id, null, null);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get patient (asynchronously)
     * Get patient&#39;s data. given an id-patient
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPatientUsingGETAsync(String xNurseappApikey, Integer id, final ApiCallback<Patient> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPatientUsingGETValidateBeforeCall(xNurseappApikey, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPatientsUsingGET
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientName patient-name (optional)
     * @param document document (optional)
     * @param status status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPatientsUsingGETCall(String xNurseappApikey, String patientName, String document, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (patientName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patient-name", patientName));
        if (document != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("document", document));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xNurseappApikey != null)
        localVarHeaderParams.put("x-nurseapp-apikey", apiClient.parameterToString(xNurseappApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPatientsUsingGETValidateBeforeCall(String xNurseappApikey, String patientName, String document, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xNurseappApikey' is set
        if (xNurseappApikey == null) {
            throw new ApiException("Missing the required parameter 'xNurseappApikey' when calling getPatientsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getPatientsUsingGETCall(xNurseappApikey, patientName, document, status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get patients
     * Get patient a list of patients
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientName patient-name (optional)
     * @param document document (optional)
     * @param status status (optional)
     * @return ResponsePatientListDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponsePatientListDto getPatientsUsingGET(String xNurseappApikey, String patientName, String document, String status) throws ApiException {
        ApiResponse<ResponsePatientListDto> resp = getPatientsUsingGETWithHttpInfo(xNurseappApikey, patientName, document, status);
        return resp.getData();
    }

    /**
     * Get patients
     * Get patient a list of patients
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientName patient-name (optional)
     * @param document document (optional)
     * @param status status (optional)
     * @return ApiResponse&lt;ResponsePatientListDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponsePatientListDto> getPatientsUsingGETWithHttpInfo(String xNurseappApikey, String patientName, String document, String status) throws ApiException {
        com.squareup.okhttp.Call call = getPatientsUsingGETValidateBeforeCall(xNurseappApikey, patientName, document, status, null, null);
        Type localVarReturnType = new TypeToken<ResponsePatientListDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get patients (asynchronously)
     * Get patient a list of patients
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param patientName patient-name (optional)
     * @param document document (optional)
     * @param status status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPatientsUsingGETAsync(String xNurseappApikey, String patientName, String document, String status, final ApiCallback<ResponsePatientListDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPatientsUsingGETValidateBeforeCall(xNurseappApikey, patientName, document, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponsePatientListDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPatientsVitalSignUsingGET
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param document document (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPatientsVitalSignUsingGETCall(String xNurseappApikey, String document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patients/vital-signs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (document != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("document", document));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xNurseappApikey != null)
        localVarHeaderParams.put("x-nurseapp-apikey", apiClient.parameterToString(xNurseappApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPatientsVitalSignUsingGETValidateBeforeCall(String xNurseappApikey, String document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xNurseappApikey' is set
        if (xNurseappApikey == null) {
            throw new ApiException("Missing the required parameter 'xNurseappApikey' when calling getPatientsVitalSignUsingGET(Async)");
        }
        
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling getPatientsVitalSignUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getPatientsVitalSignUsingGETCall(xNurseappApikey, document, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get patients vital signs history
     * Get a list of patient&#39;s vital signs registered
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param document document (required)
     * @return ResponsePatientVitalSignListDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponsePatientVitalSignListDto getPatientsVitalSignUsingGET(String xNurseappApikey, String document) throws ApiException {
        ApiResponse<ResponsePatientVitalSignListDto> resp = getPatientsVitalSignUsingGETWithHttpInfo(xNurseappApikey, document);
        return resp.getData();
    }

    /**
     * Get patients vital signs history
     * Get a list of patient&#39;s vital signs registered
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param document document (required)
     * @return ApiResponse&lt;ResponsePatientVitalSignListDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponsePatientVitalSignListDto> getPatientsVitalSignUsingGETWithHttpInfo(String xNurseappApikey, String document) throws ApiException {
        com.squareup.okhttp.Call call = getPatientsVitalSignUsingGETValidateBeforeCall(xNurseappApikey, document, null, null);
        Type localVarReturnType = new TypeToken<ResponsePatientVitalSignListDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get patients vital signs history (asynchronously)
     * Get a list of patient&#39;s vital signs registered
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param document document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPatientsVitalSignUsingGETAsync(String xNurseappApikey, String document, final ApiCallback<ResponsePatientVitalSignListDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPatientsVitalSignUsingGETValidateBeforeCall(xNurseappApikey, document, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponsePatientVitalSignListDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePatientUsingPUT
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @param patientDto patientDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePatientUsingPUTCall(String xNurseappApikey, Integer id, PatientDto patientDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = patientDto;

        // create path and map variables
        String localVarPath = "/patients/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xNurseappApikey != null)
        localVarHeaderParams.put("x-nurseapp-apikey", apiClient.parameterToString(xNurseappApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePatientUsingPUTValidateBeforeCall(String xNurseappApikey, Integer id, PatientDto patientDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xNurseappApikey' is set
        if (xNurseappApikey == null) {
            throw new ApiException("Missing the required parameter 'xNurseappApikey' when calling updatePatientUsingPUT(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePatientUsingPUT(Async)");
        }
        
        // verify the required parameter 'patientDto' is set
        if (patientDto == null) {
            throw new ApiException("Missing the required parameter 'patientDto' when calling updatePatientUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePatientUsingPUTCall(xNurseappApikey, id, patientDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update patient
     * Update patient data
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @param patientDto patientDto (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePatientUsingPUT(String xNurseappApikey, Integer id, PatientDto patientDto) throws ApiException {
        updatePatientUsingPUTWithHttpInfo(xNurseappApikey, id, patientDto);
    }

    /**
     * Update patient
     * Update patient data
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @param patientDto patientDto (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePatientUsingPUTWithHttpInfo(String xNurseappApikey, Integer id, PatientDto patientDto) throws ApiException {
        com.squareup.okhttp.Call call = updatePatientUsingPUTValidateBeforeCall(xNurseappApikey, id, patientDto, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update patient (asynchronously)
     * Update patient data
     * @param xNurseappApikey API KEY from the agent caller. (required)
     * @param id id (required)
     * @param patientDto patientDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePatientUsingPUTAsync(String xNurseappApikey, Integer id, PatientDto patientDto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePatientUsingPUTValidateBeforeCall(xNurseappApikey, id, patientDto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
